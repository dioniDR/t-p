#!/usr/bin/env python3
# db_connection_test.py
"""
Script simple para probar la conexi√≥n a MySQL leyendo variables desde .env
"""

import os
import sys
from dotenv import load_dotenv
import mysql.connector
from mysql.connector import Error

def load_env_variables():
    """Carga variables de entorno desde archivo .env"""
    load_dotenv()
    
    # Leer variables MySQL
    mysql_vars = {
        'host': os.getenv('MYSQL_HOST', '127.0.0.1'),
        'port': os.getenv('MYSQL_PORT', '3306'),
        'user': os.getenv('MYSQL_USER', 'root'),
        'password': os.getenv('MYSQL_PASSWORD', ''),
        'database': os.getenv('MYSQL_DATABASE', '')
    }
    
    return mysql_vars

def test_connection(connection_params):
    """Prueba la conexi√≥n a MySQL con los par√°metros proporcionados"""
    try:
        # Convertir puerto a entero
        if 'port' in connection_params:
            connection_params['port'] = int(connection_params['port'])
        
        # Mostrar par√°metros de conexi√≥n (ocultando contrase√±a)
        safe_params = connection_params.copy()
        if 'password' in safe_params:
            safe_params['password'] = '********' if safe_params['password'] else '[vac√≠o]'
        
        print("\nüîå Intentando conexi√≥n a MySQL con los siguientes par√°metros:")
        for key, value in safe_params.items():
            print(f"  - {key}: {value}")
        
        # Intentar conexi√≥n
        connection = mysql.connector.connect(**connection_params)
        
        if connection.is_connected():
            print("\n‚úÖ Conexi√≥n exitosa a MySQL!")
            
            # Obtener informaci√≥n del servidor
            db_info = connection.get_server_info()
            print(f"  - Versi√≥n del servidor: {db_info}")
            
            # Mostrar base de datos actual
            cursor = connection.cursor()
            cursor.execute("SELECT DATABASE();")
            db_name = cursor.fetchone()[0]
            print(f"  - Base de datos actual: {db_name or '[Ninguna seleccionada]'}")
            
            # Mostrar bases de datos disponibles
            cursor.execute("SHOW DATABASES;")
            databases = cursor.fetchall()
            print("\nüìö Bases de datos disponibles:")
            for db in databases:
                print(f"  - {db[0]}")
                
            # Cerrar conexi√≥n
            cursor.close()
            connection.close()
            print("\nüîí Conexi√≥n cerrada correctamente")
            return True
            
    except Error as e:
        print(f"\n‚ùå Error al conectar a MySQL: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("\nüîç Prueba de conexi√≥n a MySQL")
    print("============================")
    
    # Cargar variables desde .env
    mysql_params = load_env_variables()
    
    # Mostrar variables cargadas
    print("\nüìã Variables de entorno detectadas:")
    safe_params = mysql_params.copy()
    if 'password' in safe_params:
        safe_params['password'] = '********' if safe_params['password'] else '[vac√≠o]'
    
    for key, value in safe_params.items():
        print(f"  - MYSQL_{key.upper()}: {value}")
    
    # Probar conexi√≥n
    success = test_connection(mysql_params)
    
    # Resultado final
    if success:
        print("\n‚úÖ La prueba de conexi√≥n fue exitosa")
    else:
        print("\n‚ùå La prueba de conexi√≥n fall√≥")
        
        # Sugerencias
        print("\nüí° Sugerencias:")
        print("  - Verifica que el servidor MySQL est√© en ejecuci√≥n")
        print("  - Confirma que el puerto es correcto")
        print("  - Aseg√∫rate de que el usuario y contrase√±a son correctos")
        print("  - Verifica los permisos de conexi√≥n del usuario")

if __name__ == "__main__":
    main()